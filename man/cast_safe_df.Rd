% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cast_safe_df.R
\name{cast_safe_df}
\alias{cast_safe_df}
\title{Cast Safe Df
Safely run a function and return a consistent data frame}
\usage{
cast_safe_df(
  fun,
  ...,
  context = NULL,
  placeholder = tibble::tibble(result = NA)
)
}
\arguments{
\item{fun}{A function to execute.}

\item{...}{Arguments passed to \code{fun}.}

\item{context}{Optional character string describing the context of this call (e.g., filename or input value). Defaults to \code{NULL}.}

\item{placeholder}{A tibble to return if the function fails or returns an empty data frame. Defaults to \code{tibble(result = NA)}.}
}
\value{
A tibble containing:
\describe{
\item{result}{The output of the function (or placeholder if failed).}
\item{context}{The context string provided.}
\item{error}{The error message if the function failed, otherwise \code{NA}.}
}
}
\description{
Executes any function while handling errors and empty outputs gracefully.
Returns a tibble with the original results, plus \code{context} and \code{error} columns.
}
\details{
This function is useful for safely executing functions that may fail on some inputs,
such as reading multiple files where some may be missing or malformed. It ensures
that the output is always a tibble and can be safely combined using \code{purrr::map_df()}.
}
\examples{
library(tibble)
library(purrr)

# Example 1: math function with possible errors
f <- function(x) {
  if (x == 0) stop("Cannot divide by zero!")
  10 / x
}
nums <- -1:1
out <- map_df(nums, ~ safe_run_df(
  f, .x,
  context = paste("value =", .x),
  placeholder = tibble(result = NA_real_)
))
print(out)

# Example 2: reading multiple files safely
# df <- map_df(list.files(pattern = ".csv", full.names = TRUE),
#              ~ safe_run_df(readr::read_csv, .x,
#                            col_names = FALSE,
#                            show_col_types = FALSE,
#                            context = basename(.x),
#                            placeholder = tibble(X1 = NA_character_)))

}
